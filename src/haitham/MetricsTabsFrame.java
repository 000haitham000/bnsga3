/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package haitham;

import utils.InputOutput;
import utils.PerformanceMetrics;
import emo.VirtualIndividual;
import java.awt.Component;
import java.awt.HeadlessException;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.table.DefaultTableModel;
import jmetal.core.SolutionSet;
import jmetal.qualityIndicator.Hypervolume;
import jmetal.qualityIndicator.fastHypervolume.wfg.WFGHV;

/**
 *
 * @author Haitham
 */
public class MetricsTabsFrame extends javax.swing.JFrame {

    DefaultListModel hv_filesListModel;
    DefaultListModel gd_filesListModel;
    DefaultListModel div_filesListModel;
    DefaultTableModel boxingPointsTableModel;
    VirtualIndividual[] paretoFront;

    /**
     * Creates new form HyperVolumeCalculator
     */
    public MetricsTabsFrame() {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(HyperVolumeCalculator.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(HyperVolumeCalculator.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(HyperVolumeCalculator.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(HyperVolumeCalculator.class.getName()).log(Level.SEVERE, null, ex);
        }
        setLocationByPlatform(true);
        initComponents();
        hv_filesListModel = new DefaultListModel();
        gd_filesListModel = new DefaultListModel();
        div_filesListModel = new DefaultListModel();
        Vector<String> columnsNames = new Vector<String>();
        columnsNames.add("Objective");
        columnsNames.add("Min. Value");
        columnsNames.add("Max. Value");
        boxingPointsTableModel = new DefaultTableModel(null, columnsNames);
        hv_filesList.setModel(hv_filesListModel);
        gd_filesList.setModel(gd_filesListModel);
        div_filesList.setModel(div_filesListModel);
        boxingPointsTable.setModel(boxingPointsTableModel);
        setBoxPointsPanelEnabled(false);
        AutoFocusSpinner.installFocusListener(minValueSpinner);
        AutoFocusSpinner.installFocusListener(maxValueSpinner);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        gdTabbedPane = new javax.swing.JTabbedPane();
        hvPanel = new javax.swing.JPanel();
        hv_filesPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        hv_filesList = new javax.swing.JList();
        hv_generateCheckBox = new javax.swing.JCheckBox();
        hv_addFileButton = new javax.swing.JButton();
        hv_removeFileButton = new javax.swing.JButton();
        hv_autoAdjustCheckBox = new javax.swing.JCheckBox();
        boxingPointsPanel = new javax.swing.JPanel();
        maxValueSpinner = new javax.swing.JSpinner();
        minValueSpinner = new javax.swing.JSpinner();
        minValueLabel = new javax.swing.JLabel();
        maxValueLabel = new javax.swing.JLabel();
        addBoxingPointButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        boxingPointsTable = new javax.swing.JTable();
        hv_outputPanel = new javax.swing.JPanel();
        hv_outputFilePathTextField = new javax.swing.JTextField();
        hv_outputBrowseButton = new javax.swing.JButton();
        hv_calculateButton = new javax.swing.JButton();
        gdIgdPanel = new javax.swing.JPanel();
        gd_filesPanel = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        gd_filesList = new javax.swing.JList();
        gd_addFileButton = new javax.swing.JButton();
        gd_removeFileButton = new javax.swing.JButton();
        gd_outputPanel = new javax.swing.JPanel();
        gd_outputFilePathTextField = new javax.swing.JTextField();
        gd_outputBrowseButton = new javax.swing.JButton();
        gd_calculateButton = new javax.swing.JButton();
        paretoFrontPanel = new javax.swing.JPanel();
        paretoFrontFilePathTextField = new javax.swing.JTextField();
        paretoFrontBrowseButton = new javax.swing.JButton();
        objCountLabel = new javax.swing.JLabel();
        NumberFormat numberFormat = NumberFormat.getInstance();
        objCountFormattedTextField = new javax.swing.JFormattedTextField(numberFormat);
        divPanel = new javax.swing.JPanel();
        div_filesPanel = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        div_filesList = new javax.swing.JList();
        div_addFileButton = new javax.swing.JButton();
        div_removeFileButton = new javax.swing.JButton();
        refDirsPanel = new javax.swing.JPanel();
        refDirsFileTextField = new javax.swing.JTextField();
        refDirsBrowseButton = new javax.swing.JButton();
        div_outputPanel = new javax.swing.JPanel();
        div_outputFilePathTextField = new javax.swing.JTextField();
        div_outputBrowseButton = new javax.swing.JButton();
        divObjCountLabel = new javax.swing.JLabel();
        div_calculateButton = new javax.swing.JButton();
        divObjCountFormattedTextField = new javax.swing.JFormattedTextField();
        utopianFormattedTextField = new javax.swing.JFormattedTextField();
        jLabel1 = new javax.swing.JLabel();

        fileChooser.setCurrentDirectory(new java.io.File("F:\\IEEE-TEVC-DC-NSGA-III (objective space files only)"));
        fileChooser.setMultiSelectionEnabled(true);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        hv_filesPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Population Files"));

        hv_filesList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                hv_filesListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(hv_filesList);

        hv_generateCheckBox.setSelected(true);
        hv_generateCheckBox.setText("Generate boxing points from input files");
        hv_generateCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                hv_generateCheckBoxStateChanged(evt);
            }
        });

        hv_addFileButton.setText("Add File");
        hv_addFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hv_addFileButtonActionPerformed(evt);
            }
        });

        hv_removeFileButton.setText("Remove File");
        hv_removeFileButton.setEnabled(false);
        hv_removeFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hv_removeFileButtonActionPerformed(evt);
            }
        });

        hv_autoAdjustCheckBox.setSelected(true);
        hv_autoAdjustCheckBox.setText("Auto. adjust Max. values (x1.01)");

        javax.swing.GroupLayout hv_filesPanelLayout = new javax.swing.GroupLayout(hv_filesPanel);
        hv_filesPanel.setLayout(hv_filesPanelLayout);
        hv_filesPanelLayout.setHorizontalGroup(
            hv_filesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(hv_filesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(hv_filesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, hv_filesPanelLayout.createSequentialGroup()
                        .addComponent(hv_addFileButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(hv_removeFileButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 106, Short.MAX_VALUE)
                        .addComponent(hv_autoAdjustCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(hv_generateCheckBox)))
                .addContainerGap())
        );
        hv_filesPanelLayout.setVerticalGroup(
            hv_filesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(hv_filesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 146, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(hv_filesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hv_generateCheckBox)
                    .addComponent(hv_addFileButton)
                    .addComponent(hv_removeFileButton)
                    .addComponent(hv_autoAdjustCheckBox))
                .addContainerGap())
        );

        boxingPointsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Boxing Points"));

        maxValueSpinner.setModel(new javax.swing.SpinnerNumberModel(0.0f, null, null, 0.1f));

        minValueSpinner.setModel(new javax.swing.SpinnerNumberModel(0.0f, null, null, 0.1f));

        minValueLabel.setText("Min. Value");

        maxValueLabel.setText("Max. Value");

        addBoxingPointButton.setText("Add Boxing Point");
        addBoxingPointButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBoxingPointButtonActionPerformed(evt);
            }
        });

        boxingPointsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane3.setViewportView(boxingPointsTable);

        javax.swing.GroupLayout boxingPointsPanelLayout = new javax.swing.GroupLayout(boxingPointsPanel);
        boxingPointsPanel.setLayout(boxingPointsPanelLayout);
        boxingPointsPanelLayout.setHorizontalGroup(
            boxingPointsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(boxingPointsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(boxingPointsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, boxingPointsPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(minValueLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(minValueSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(maxValueLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(maxValueSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(addBoxingPointButton))
                    .addComponent(jScrollPane3))
                .addContainerGap())
        );
        boxingPointsPanelLayout.setVerticalGroup(
            boxingPointsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(boxingPointsPanelLayout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 99, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(boxingPointsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(minValueSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(maxValueSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(minValueLabel)
                    .addComponent(maxValueLabel)
                    .addComponent(addBoxingPointButton))
                .addContainerGap())
        );

        hv_outputPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Output"));

        hv_outputBrowseButton.setText("Browse");
        hv_outputBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hv_outputBrowseButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout hv_outputPanelLayout = new javax.swing.GroupLayout(hv_outputPanel);
        hv_outputPanel.setLayout(hv_outputPanelLayout);
        hv_outputPanelLayout.setHorizontalGroup(
            hv_outputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(hv_outputPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(hv_outputFilePathTextField)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(hv_outputBrowseButton)
                .addContainerGap())
        );
        hv_outputPanelLayout.setVerticalGroup(
            hv_outputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(hv_outputPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(hv_outputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hv_outputFilePathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hv_outputBrowseButton))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        hv_calculateButton.setText("Calculate & Store Hypervolumes");
        hv_calculateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hv_calculateButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout hvPanelLayout = new javax.swing.GroupLayout(hvPanel);
        hvPanel.setLayout(hvPanelLayout);
        hvPanelLayout.setHorizontalGroup(
            hvPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(hvPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(hvPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(hv_filesPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(boxingPointsPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(hv_outputPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, hvPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(hv_calculateButton)))
                .addContainerGap())
        );
        hvPanelLayout.setVerticalGroup(
            hvPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(hvPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(hv_filesPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(boxingPointsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(hv_outputPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(hv_calculateButton)
                .addContainerGap())
        );

        gdTabbedPane.addTab("Hypervolume", hvPanel);

        gd_filesPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Population Files"));

        gd_filesList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                gd_filesListValueChanged(evt);
            }
        });
        jScrollPane4.setViewportView(gd_filesList);

        gd_addFileButton.setText("Add File");
        gd_addFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gd_addFileButtonActionPerformed(evt);
            }
        });

        gd_removeFileButton.setText("Remove File");
        gd_removeFileButton.setEnabled(false);
        gd_removeFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gd_removeFileButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout gd_filesPanelLayout = new javax.swing.GroupLayout(gd_filesPanel);
        gd_filesPanel.setLayout(gd_filesPanelLayout);
        gd_filesPanelLayout.setHorizontalGroup(
            gd_filesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(gd_filesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(gd_filesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 672, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, gd_filesPanelLayout.createSequentialGroup()
                        .addComponent(gd_addFileButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(gd_removeFileButton)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        gd_filesPanelLayout.setVerticalGroup(
            gd_filesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(gd_filesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 240, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(gd_filesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(gd_addFileButton)
                    .addComponent(gd_removeFileButton))
                .addContainerGap())
        );

        gd_outputPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Output"));

        gd_outputBrowseButton.setText("Browse");
        gd_outputBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gd_outputBrowseButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout gd_outputPanelLayout = new javax.swing.GroupLayout(gd_outputPanel);
        gd_outputPanel.setLayout(gd_outputPanelLayout);
        gd_outputPanelLayout.setHorizontalGroup(
            gd_outputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(gd_outputPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(gd_outputFilePathTextField)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(gd_outputBrowseButton)
                .addContainerGap())
        );
        gd_outputPanelLayout.setVerticalGroup(
            gd_outputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(gd_outputPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(gd_outputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(gd_outputFilePathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gd_outputBrowseButton))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        gd_calculateButton.setText("Calculate & Store GD & IGD");
        gd_calculateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gd_calculateButtonActionPerformed(evt);
            }
        });

        paretoFrontPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Pareto Front Objective Space"));

        paretoFrontBrowseButton.setText("Browse");
        paretoFrontBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paretoFrontBrowseButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout paretoFrontPanelLayout = new javax.swing.GroupLayout(paretoFrontPanel);
        paretoFrontPanel.setLayout(paretoFrontPanelLayout);
        paretoFrontPanelLayout.setHorizontalGroup(
            paretoFrontPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paretoFrontPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(paretoFrontFilePathTextField)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(paretoFrontBrowseButton)
                .addContainerGap())
        );
        paretoFrontPanelLayout.setVerticalGroup(
            paretoFrontPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paretoFrontPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(paretoFrontPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(paretoFrontFilePathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(paretoFrontBrowseButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        objCountLabel.setText("Number of Objectives");

        objCountFormattedTextField.setValue(new Double(2));
        objCountFormattedTextField.setColumns(10);
        //objCountFormattedTextField.addPropertyChangeListener("value", this);
        objCountFormattedTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        javax.swing.GroupLayout gdIgdPanelLayout = new javax.swing.GroupLayout(gdIgdPanel);
        gdIgdPanel.setLayout(gdIgdPanelLayout);
        gdIgdPanelLayout.setHorizontalGroup(
            gdIgdPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, gdIgdPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(gdIgdPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(paretoFrontPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(gd_filesPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(gd_outputPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(gdIgdPanelLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(objCountLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(objCountFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(gd_calculateButton)))
                .addContainerGap())
        );
        gdIgdPanelLayout.setVerticalGroup(
            gdIgdPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(gdIgdPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(gd_filesPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(paretoFrontPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(gd_outputPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(gdIgdPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(gd_calculateButton)
                    .addComponent(objCountLabel)
                    .addComponent(objCountFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        gdTabbedPane.addTab("Generational Distance (GD) & Inverse GD (IGD)", gdIgdPanel);

        div_filesPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Population Files"));

        div_filesList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                div_filesListValueChanged(evt);
            }
        });
        jScrollPane5.setViewportView(div_filesList);

        div_addFileButton.setText("Add File");
        div_addFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                div_addFileButtonActionPerformed(evt);
            }
        });

        div_removeFileButton.setText("Remove File");
        div_removeFileButton.setEnabled(false);
        div_removeFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                div_removeFileButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout div_filesPanelLayout = new javax.swing.GroupLayout(div_filesPanel);
        div_filesPanel.setLayout(div_filesPanelLayout);
        div_filesPanelLayout.setHorizontalGroup(
            div_filesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(div_filesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(div_filesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 672, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, div_filesPanelLayout.createSequentialGroup()
                        .addComponent(div_addFileButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(div_removeFileButton)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        div_filesPanelLayout.setVerticalGroup(
            div_filesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(div_filesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 240, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(div_filesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(div_addFileButton)
                    .addComponent(div_removeFileButton))
                .addContainerGap())
        );

        refDirsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Reference Directions"));

        refDirsBrowseButton.setText("Browse");
        refDirsBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refDirsBrowseButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout refDirsPanelLayout = new javax.swing.GroupLayout(refDirsPanel);
        refDirsPanel.setLayout(refDirsPanelLayout);
        refDirsPanelLayout.setHorizontalGroup(
            refDirsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(refDirsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(refDirsFileTextField)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(refDirsBrowseButton)
                .addContainerGap())
        );
        refDirsPanelLayout.setVerticalGroup(
            refDirsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(refDirsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(refDirsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(refDirsFileTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(refDirsBrowseButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        div_outputPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Output"));

        div_outputBrowseButton.setText("Browse");
        div_outputBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                div_outputBrowseButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout div_outputPanelLayout = new javax.swing.GroupLayout(div_outputPanel);
        div_outputPanel.setLayout(div_outputPanelLayout);
        div_outputPanelLayout.setHorizontalGroup(
            div_outputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(div_outputPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(div_outputFilePathTextField)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(div_outputBrowseButton)
                .addContainerGap())
        );
        div_outputPanelLayout.setVerticalGroup(
            div_outputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(div_outputPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(div_outputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(div_outputFilePathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(div_outputBrowseButton))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        divObjCountLabel.setText("Number of Objectives");

        div_calculateButton.setText("Calculate Diversity Metric");
        div_calculateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                div_calculateButtonActionPerformed(evt);
            }
        });

        divObjCountFormattedTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        divObjCountFormattedTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        utopianFormattedTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.000000"))));
        utopianFormattedTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel1.setText("Utopian Epsilon");

        javax.swing.GroupLayout divPanelLayout = new javax.swing.GroupLayout(divPanel);
        divPanel.setLayout(divPanelLayout);
        divPanelLayout.setHorizontalGroup(
            divPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(divPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(divPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(div_filesPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(refDirsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(div_outputPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(divPanelLayout.createSequentialGroup()
                        .addComponent(divObjCountLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(divObjCountFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(utopianFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(div_calculateButton)))
                .addContainerGap())
        );
        divPanelLayout.setVerticalGroup(
            divPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(divPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(div_filesPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(refDirsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(div_outputPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(divPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(div_calculateButton)
                    .addComponent(divObjCountLabel)
                    .addComponent(divObjCountFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(utopianFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addContainerGap())
        );

        gdTabbedPane.addTab("DiversityMetric", divPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(gdTabbedPane)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(gdTabbedPane)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void hv_filesListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_hv_filesListValueChanged
        if (hv_filesList.getSelectedIndex() == -1) {
            hv_removeFileButton.setEnabled(false);
        } else {
            hv_removeFileButton.setEnabled(true);
        }
    }//GEN-LAST:event_hv_filesListValueChanged

    private void hv_generateCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_hv_generateCheckBoxStateChanged
        if (hv_generateCheckBox.isSelected()) {
            setBoxPointsPanelEnabled(false);
        } else {
            setBoxPointsPanelEnabled(true);
        }
    }//GEN-LAST:event_hv_generateCheckBoxStateChanged

    private void hv_addFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hv_addFileButtonActionPerformed
        addFilesToList(hv_filesListModel);
    }//GEN-LAST:event_hv_addFileButtonActionPerformed

    private void addFilesToList(DefaultListModel listModel) throws HeadlessException {
        fileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        fileChooser.setCurrentDirectory(new File("E:\\POST-GECCO-2016\\osy-030-020-P0032-G5000"));
        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            for (File selectedFile : fileChooser.getSelectedFiles()) {
                if (selectedFile.isDirectory()) {
                    List<File> filesInDirList = new ArrayList<File>();
                    deepFilesExtraction(selectedFile, filesInDirList);
                    for (File file : filesInDirList) {
                        listModel.addElement(file.getPath());
                    }
                } else {
                    listModel.addElement(selectedFile.getPath());
                }
            }
        }
    }

    private void hv_removeFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hv_removeFileButtonActionPerformed
        hv_filesListModel.remove(hv_filesList.getSelectedIndex());
    }//GEN-LAST:event_hv_removeFileButtonActionPerformed

    private void addBoxingPointButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBoxingPointButtonActionPerformed
        double minValue = Double.parseDouble(minValueSpinner.getValue().toString());
        double maxValue = Double.parseDouble(maxValueSpinner.getValue().toString());
        if (minValue >= maxValue) {
            JOptionPane.showMessageDialog(this, "Max. point must be greater than Min. point");
            return;
        }
        Vector dataVector = boxingPointsTableModel.getDataVector();
        int objIndex = 0;
        if (dataVector.size() == 0) {
            objIndex = -1;
        } else {
            Vector lastRow = (Vector) dataVector.get(dataVector.size() - 1);
            String cellContent = (String) lastRow.get(0);
            String afterOpenParenthesis = cellContent.split("\\(")[1];
            objIndex = Integer.parseInt(afterOpenParenthesis.substring(0, afterOpenParenthesis.length() - 1));
        }
        Vector newRow = new Vector();
        newRow.add(String.format("Obj(%d)", objIndex + 1));
        newRow.add(minValueSpinner.getValue().toString());
        newRow.add(maxValueSpinner.getValue().toString());
        boxingPointsTableModel.addRow(newRow);
    }//GEN-LAST:event_addBoxingPointButtonActionPerformed

    private void hv_outputBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hv_outputBrowseButtonActionPerformed
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            hv_outputFilePathTextField.setText(fileChooser.getSelectedFile().getPath());
        }
    }//GEN-LAST:event_hv_outputBrowseButtonActionPerformed

    private void hv_calculateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hv_calculateButtonActionPerformed
        try {
            doAllTheHvWork();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, ex.toString(), "I/O Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception ex) {
            Logger.getLogger(HyperVolumeCalculator.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_hv_calculateButtonActionPerformed

    private void gd_filesListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_gd_filesListValueChanged
        if (gd_filesList.getSelectedIndex() == -1) {
            gd_removeFileButton.setEnabled(false);
        } else {
            gd_removeFileButton.setEnabled(true);
        }
    }//GEN-LAST:event_gd_filesListValueChanged

    private void gd_addFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gd_addFileButtonActionPerformed
        addFilesToList(gd_filesListModel);
    }//GEN-LAST:event_gd_addFileButtonActionPerformed

    private void gd_removeFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gd_removeFileButtonActionPerformed
        gd_filesListModel.remove(gd_filesList.getSelectedIndex());
    }//GEN-LAST:event_gd_removeFileButtonActionPerformed

    private void gd_outputBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gd_outputBrowseButtonActionPerformed
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            gd_outputFilePathTextField.setText(fileChooser.getSelectedFile().getPath());
        }
    }//GEN-LAST:event_gd_outputBrowseButtonActionPerformed

    private void gd_calculateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gd_calculateButtonActionPerformed
        try {
            doAllTheGdIgdWork();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, ex.toString(), "I/O Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception ex) {
            Logger.getLogger(HyperVolumeCalculator.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_gd_calculateButtonActionPerformed

    private void paretoFrontBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paretoFrontBrowseButtonActionPerformed
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            try {
                paretoFrontFilePathTextField.setText(fileChooser.getSelectedFile().getPath());
                paretoFront = InputOutput.loadIndividualsFromFile(new File(fileChooser.getSelectedFile().getPath()));
            } catch (IOException ex) {
                Logger.getLogger(MetricsTabsFrame.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, ex.toString());
            }
        }
    }//GEN-LAST:event_paretoFrontBrowseButtonActionPerformed

    private void div_filesListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_div_filesListValueChanged
        if (div_filesList.getSelectedIndex() == -1) {
            div_removeFileButton.setEnabled(false);
        } else {
            div_removeFileButton.setEnabled(true);
        }
    }//GEN-LAST:event_div_filesListValueChanged

    private void div_addFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_div_addFileButtonActionPerformed
        addFilesToList(div_filesListModel);
    }//GEN-LAST:event_div_addFileButtonActionPerformed

    private void div_removeFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_div_removeFileButtonActionPerformed
        div_filesListModel.remove(div_filesList.getSelectedIndex());
    }//GEN-LAST:event_div_removeFileButtonActionPerformed

    private void div_outputBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_div_outputBrowseButtonActionPerformed
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            div_outputFilePathTextField.setText(fileChooser.getSelectedFile().getPath());
        }
    }//GEN-LAST:event_div_outputBrowseButtonActionPerformed

    private void div_calculateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_div_calculateButtonActionPerformed
        try {
            doAllTheDiversityMetricWork();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, ex.toString(), "I/O Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception ex) {
            Logger.getLogger(HyperVolumeCalculator.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_div_calculateButtonActionPerformed

    private void refDirsBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refDirsBrowseButtonActionPerformed
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            refDirsFileTextField.setText(fileChooser.getSelectedFile().getPath());
        }
    }//GEN-LAST:event_refDirsBrowseButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MetricsTabsFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MetricsTabsFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MetricsTabsFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MetricsTabsFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MetricsTabsFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBoxingPointButton;
    private javax.swing.JPanel boxingPointsPanel;
    private javax.swing.JTable boxingPointsTable;
    private javax.swing.JFormattedTextField divObjCountFormattedTextField;
    private javax.swing.JLabel divObjCountLabel;
    private javax.swing.JPanel divPanel;
    private javax.swing.JButton div_addFileButton;
    private javax.swing.JButton div_calculateButton;
    private javax.swing.JList div_filesList;
    private javax.swing.JPanel div_filesPanel;
    private javax.swing.JButton div_outputBrowseButton;
    private javax.swing.JTextField div_outputFilePathTextField;
    private javax.swing.JPanel div_outputPanel;
    private javax.swing.JButton div_removeFileButton;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JPanel gdIgdPanel;
    private javax.swing.JTabbedPane gdTabbedPane;
    private javax.swing.JButton gd_addFileButton;
    private javax.swing.JButton gd_calculateButton;
    private javax.swing.JList gd_filesList;
    private javax.swing.JPanel gd_filesPanel;
    private javax.swing.JButton gd_outputBrowseButton;
    private javax.swing.JTextField gd_outputFilePathTextField;
    private javax.swing.JPanel gd_outputPanel;
    private javax.swing.JButton gd_removeFileButton;
    private javax.swing.JPanel hvPanel;
    private javax.swing.JButton hv_addFileButton;
    private javax.swing.JCheckBox hv_autoAdjustCheckBox;
    private javax.swing.JButton hv_calculateButton;
    private javax.swing.JList hv_filesList;
    private javax.swing.JPanel hv_filesPanel;
    private javax.swing.JCheckBox hv_generateCheckBox;
    private javax.swing.JButton hv_outputBrowseButton;
    private javax.swing.JTextField hv_outputFilePathTextField;
    private javax.swing.JPanel hv_outputPanel;
    private javax.swing.JButton hv_removeFileButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JLabel maxValueLabel;
    private javax.swing.JSpinner maxValueSpinner;
    private javax.swing.JLabel minValueLabel;
    private javax.swing.JSpinner minValueSpinner;
    private javax.swing.JFormattedTextField objCountFormattedTextField;
    private javax.swing.JLabel objCountLabel;
    private javax.swing.JButton paretoFrontBrowseButton;
    private javax.swing.JTextField paretoFrontFilePathTextField;
    private javax.swing.JPanel paretoFrontPanel;
    private javax.swing.JButton refDirsBrowseButton;
    private javax.swing.JTextField refDirsFileTextField;
    private javax.swing.JPanel refDirsPanel;
    private javax.swing.JFormattedTextField utopianFormattedTextField;
    // End of variables declaration//GEN-END:variables

    private void doAllTheDiversityMetricWork() throws IOException, Exception {
        try {
            StringBuilder gdReportBuilder = new StringBuilder();
            String dirsFilePath = refDirsFileTextField.getText();
            VirtualIndividual[] refDirs = InputOutput.loadIndividualsFromFile(new File(dirsFilePath));
            for (int i = 0; i < div_filesListModel.size(); i++) {
                System.out.println(div_filesListModel.get(i).toString());
                // Hypervolume calculations
                String filePath = (String) div_filesListModel.get(i);

                VirtualIndividual[] population = InputOutput.loadIndividualsFromFile(new File(filePath));
                double div = PerformanceMetrics.calculateDiversityMetric(population, refDirs, Double.parseDouble(utopianFormattedTextField.getText()));

                gdReportBuilder.append(String.format("%-150s (%12.7f)%n", filePath, div));
            }
            writeReportToFile(gdReportBuilder.toString(), div_outputFilePathTextField.getText() + "/div_report.txt");
            JOptionPane.showMessageDialog(this, "DIV Report Generated Successfully", "Finished Successfully", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.toString(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void doAllTheGdIgdWork() throws IOException, Exception {
        try {
            StringBuilder gdReportBuilder = new StringBuilder();
            StringBuilder igdReportBuilder = new StringBuilder();
            for (int i = 0; i < gd_filesListModel.size(); i++) {
                System.out.println(gd_filesListModel.get(i).toString());
                // Hypervolume calculations
                String filePath = (String) gd_filesListModel.get(i);

                VirtualIndividual[] population = InputOutput.loadIndividualsFromFile(new File(filePath));
                double gd = PerformanceMetrics.calculateGenerationalDistance(Integer.parseInt(objCountFormattedTextField.getText()), population, paretoFront, 2);
                double igd = PerformanceMetrics.calculateInvertedGenerationalDistance(Integer.parseInt(objCountFormattedTextField.getText()), population, paretoFront, 2);

                gdReportBuilder.append(String.format("%-150s (%12.7f)%n", filePath, gd));
                igdReportBuilder.append(String.format("%-150s (%12.7f)%n", filePath, igd));
//                gdReportBuilder.append(String.format("%25.20f%n", gd));
//                igdReportBuilder.append(String.format("%25.20f%n", igd));
            }
            writeReportToFile(gdReportBuilder.toString(), gd_outputFilePathTextField.getText() + "/gd_report.txt");
            writeReportToFile(igdReportBuilder.toString(), gd_outputFilePathTextField.getText() + "/igd_report.txt");
            JOptionPane.showMessageDialog(this, "GD/IGD Report Generated Successfully", "Finished Successfully", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.toString(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void doAllTheHvWork() throws IOException, Exception {
        try {
            // Read Min. & Max. values
            double[] minValues;
            double[] maxValues;
            if (hv_generateCheckBox.isSelected()) {
                // Either read Min. & Max. values from a file
                minValues = getMinMaxValuesFromFiles(true);
                System.out.println("Ideal Point = " + Arrays.toString(minValues));
                maxValues = getMinMaxValuesFromFiles(false);
                System.out.println("Ref.  Point = " + Arrays.toString(maxValues));
            } else {
                // Or read Min. & Max. values from the table
                minValues = getMinMaxValuesFromTable(true);
                maxValues = getMinMaxValuesFromTable(false);
            }
            if (hv_autoAdjustCheckBox.isSelected()) {
                // Perform Auto-adjust if the checkbox is selected
                for (int i = 0; i < maxValues.length; i++) {
                    maxValues[i] = maxValues[i] * 1.01;
                }
            }
            StringBuilder reportBuilder = new StringBuilder();
            for (int i = 0; i < hv_filesListModel.size(); i++) {
                // Hypervolume calculations
                String filePath = (String) hv_filesListModel.get(i);
                double haithamHypervolume;
                if (maxValues.length <= 5) {
                    // If you have 5 or less objectives calculate the exact
                    // hypervolume using Zitzler's algorithm
                    SolutionSet population = Utilities.haithamReadNonDominatedSolutionSet(filePath);
                    haithamHypervolume = new Hypervolume().haithamHypervolume(
                            population.writeObjectivesToMatrix(),
                            minValues,
                            maxValues,
                            minValues.length);
                } else {
                    // Otherwise, use the WFG hypervolume algorithm
                    haithamHypervolume = WFGHV.haithamHypervolume(filePath, maxValues);
                }
                //reportBuilder.append(String.format("%-150s (%12.7f)%n", filePath, haithamHypervolume));
                reportBuilder.append(String.format("%12.7f%n", haithamHypervolume));
            }
            writeReportToFile(reportBuilder.toString(), hv_outputFilePathTextField.getText() + "/hypervolumes_report.txt");
            JOptionPane.showMessageDialog(this, "Hypervolume Report Generated Successfully", "Finished Successfully", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.toString(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private double[] getMinMaxValuesFromFiles(boolean min) throws IOException {
        double[] values = null;
        for (int i = 0; i < hv_filesListModel.size(); i++) {
            BufferedReader reader = null;
            try {
                reader = new BufferedReader(new FileReader((String) hv_filesListModel.get(i)));
                String line;
                int lineCount = 0;
                while ((line = reader.readLine()) != null) {
                    lineCount++;
                    if (line.startsWith("#")) {
                        continue;
                    }
                    String[] strPartsArr = Utilities.replaceBlanksWithSingleSpace(line).split(" ");
                    Vector<Double> vector = new Vector();
                    for (int j = 0; j < strPartsArr.length; j++) {
                        vector.add(Double.parseDouble(strPartsArr[j]));
                    }
                    if (values == null) {
                        values = new double[vector.size()];
                        for (int j = 0; j < values.length; j++) {
                            values[j] = vector.get(j);
                        }
                    } else {
                        if (vector.size() == values.length) {
                            for (int j = 0; j < values.length; j++) {
                                if (min) {
                                    if (vector.get(j) < values[j]) {
                                        values[j] = vector.get(j);
                                    }
                                } else {
                                    if (vector.get(j) > values[j]) {
                                        values[j] = vector.get(j);
                                    }
                                }
                            }
                        } else {
                            String errorMessage
                                    = String.format(
                                            "Error while parsing file \"%s\"."
                                            + "Line %d has only %d objective values."
                                            + "The number of values in each data line must "
                                            + "be equal to the number of objectives which "
                                            + "is %d (According to the first line).",
                                            hv_filesListModel.get(i),
                                            lineCount,
                                            vector.size(),
                                            values.length);
                            throw new IllegalArgumentException(errorMessage);
                        }
                    }
                }
            } finally {
                if (reader != null) {
                    reader.close();
                }
            }
        }
        return values;
    }

    private double[] getMinMaxValuesFromTable(boolean min) {
        double[] values = new double[boxingPointsTableModel.getRowCount()];
        int columnIndex;
        if (min) {
            columnIndex = 1;
        } else {
            columnIndex = 2;
        }
        for (int i = 0; i < boxingPointsTableModel.getRowCount(); i++) {
            values[i] = Double.parseDouble(
                    boxingPointsTableModel.getValueAt(i, columnIndex).toString());
        }
        return values;
    }

    private void writeReportToFile(String reportText, String filePath) throws IOException {
        PrintWriter printer = null;
        try {
            printer = new PrintWriter(filePath);
            printer.print(reportText);
        } finally {
            if (printer != null) {
                printer.close();
            }
        }
    }

    private void deepFilesExtraction(File file, List<File> filesInDirList) {
        if (file.isDirectory()) {
            File[] innerFiles = file.listFiles();
            for (File innerFile : innerFiles) {
                deepFilesExtraction(innerFile, filesInDirList);
            }
        } else {
            if (file.getName().startsWith("obj") && file.getName().endsWith(".dat")) {
                filesInDirList.add(file);
            }
        }
    }

    private void setBoxPointsPanelEnabled(boolean state) {
        Component[] components = boxingPointsPanel.getComponents();
        boxingPointsPanel.setEnabled(state);
        for (Component component : components) {
            component.setEnabled(state);
        }
    }
}
