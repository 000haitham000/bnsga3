/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package haitham;

import java.awt.Component;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.table.DefaultTableModel;
import jmetal.core.SolutionSet;
import jmetal.qualityIndicator.Hypervolume;
import jmetal.qualityIndicator.fastHypervolume.wfg.WFGHV;
import jmetal.qualityIndicator.util.MetricsUtil;

/**
 *
 * @author Haitham
 */
public class HyperVolumeCalculator extends javax.swing.JFrame {

    DefaultListModel filesListModel;
    DefaultTableModel boxingPointsTableModel;

    /**
     * Creates new form HyperVolumeCalculator
     */
    public HyperVolumeCalculator() {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(HyperVolumeCalculator.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(HyperVolumeCalculator.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(HyperVolumeCalculator.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(HyperVolumeCalculator.class.getName()).log(Level.SEVERE, null, ex);
        }
        setLocationByPlatform(true);
        initComponents();
        filesListModel = new DefaultListModel();
        Vector<String> columnsNames = new Vector<String>();
        columnsNames.add("Objective");
        columnsNames.add("Min. Value");
        columnsNames.add("Max. Value");
        boxingPointsTableModel = new DefaultTableModel(null, columnsNames);
        filesList.setModel(filesListModel);
        boxingPointsTable.setModel(boxingPointsTableModel);
        setBoxPointsPanelEnabled(false);
        AutoFocusSpinner.installFocusListener(minValueSpinner);
        AutoFocusSpinner.installFocusListener(maxValueSpinner);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton2 = new javax.swing.JButton();
        fileChooser = new javax.swing.JFileChooser();
        jPanel1 = new javax.swing.JPanel();
        filesPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        filesList = new javax.swing.JList();
        generateCheckBox = new javax.swing.JCheckBox();
        addFileButton = new javax.swing.JButton();
        removeFileButton = new javax.swing.JButton();
        autoAdjustCheckBox = new javax.swing.JCheckBox();
        boxingPointsPanel = new javax.swing.JPanel();
        maxValueSpinner = new javax.swing.JSpinner();
        minValueSpinner = new javax.swing.JSpinner();
        minValueLabel = new javax.swing.JLabel();
        maxValueLabel = new javax.swing.JLabel();
        addBoxingPointButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        boxingPointsTable = new javax.swing.JTable();
        outputPanel = new javax.swing.JPanel();
        outputFilePathTextField = new javax.swing.JTextField();
        browseButton = new javax.swing.JButton();
        calculateButton = new javax.swing.JButton();

        jButton2.setText("jButton2");

        fileChooser.setCurrentDirectory(new java.io.File("D:\\results\\CEC2015 results\\original\\bi-objective"));
        fileChooser.setMultiSelectionEnabled(true);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Hypervolume Calculations");

        filesPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Population Files"));

        filesList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                filesListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(filesList);

        generateCheckBox.setSelected(true);
        generateCheckBox.setText("Generate boxing points from input files");
        generateCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                generateCheckBoxStateChanged(evt);
            }
        });

        addFileButton.setText("Add File");
        addFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFileButtonActionPerformed(evt);
            }
        });

        removeFileButton.setText("Remove File");
        removeFileButton.setEnabled(false);
        removeFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeFileButtonActionPerformed(evt);
            }
        });

        autoAdjustCheckBox.setSelected(true);
        autoAdjustCheckBox.setText("Auto. adjust Max. values (x1.01)");

        javax.swing.GroupLayout filesPanelLayout = new javax.swing.GroupLayout(filesPanel);
        filesPanel.setLayout(filesPanelLayout);
        filesPanelLayout.setHorizontalGroup(
            filesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(filesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(filesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, filesPanelLayout.createSequentialGroup()
                        .addComponent(addFileButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeFileButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(autoAdjustCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(generateCheckBox)))
                .addContainerGap())
        );

        filesPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {addFileButton, removeFileButton});

        filesPanelLayout.setVerticalGroup(
            filesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(filesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(filesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(generateCheckBox)
                    .addComponent(addFileButton)
                    .addComponent(removeFileButton)
                    .addComponent(autoAdjustCheckBox))
                .addContainerGap())
        );

        boxingPointsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Boxing Points"));

        maxValueSpinner.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(0.0f), null, null, Float.valueOf(0.1f)));

        minValueSpinner.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(0.0f), null, null, Float.valueOf(0.1f)));

        minValueLabel.setText("Min. Value");

        maxValueLabel.setText("Max. Value");

        addBoxingPointButton.setText("Add Boxing Point");
        addBoxingPointButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBoxingPointButtonActionPerformed(evt);
            }
        });

        boxingPointsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane3.setViewportView(boxingPointsTable);

        javax.swing.GroupLayout boxingPointsPanelLayout = new javax.swing.GroupLayout(boxingPointsPanel);
        boxingPointsPanel.setLayout(boxingPointsPanelLayout);
        boxingPointsPanelLayout.setHorizontalGroup(
            boxingPointsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(boxingPointsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(boxingPointsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, boxingPointsPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(minValueLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(minValueSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(maxValueLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(maxValueSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(addBoxingPointButton))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 588, Short.MAX_VALUE))
                .addContainerGap())
        );
        boxingPointsPanelLayout.setVerticalGroup(
            boxingPointsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(boxingPointsPanelLayout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 106, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(boxingPointsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(minValueSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(maxValueSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(minValueLabel)
                    .addComponent(maxValueLabel)
                    .addComponent(addBoxingPointButton))
                .addContainerGap())
        );

        outputPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Output"));

        browseButton.setText("Browse");
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout outputPanelLayout = new javax.swing.GroupLayout(outputPanel);
        outputPanel.setLayout(outputPanelLayout);
        outputPanelLayout.setHorizontalGroup(
            outputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(outputPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(outputFilePathTextField)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(browseButton)
                .addContainerGap())
        );
        outputPanelLayout.setVerticalGroup(
            outputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(outputPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(outputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(outputFilePathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browseButton))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        calculateButton.setText("Calculate & Store Hypervolumes");
        calculateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calculateButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(boxingPointsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(outputPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(calculateButton)))
                .addContainerGap())
            .addComponent(filesPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(filesPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(boxingPointsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(outputPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(calculateButton)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFileButtonActionPerformed
        fileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            for (File selectedFile : fileChooser.getSelectedFiles()) {
                if (selectedFile.isDirectory()) {
                    List<File> filesInDirList = new ArrayList();
                    deepFilesExtraction(selectedFile, filesInDirList);
                    for (File file : filesInDirList) {
                        filesListModel.addElement(file.getPath());
                    }
                } else {
                    filesListModel.addElement(selectedFile.getPath());
                }
            }
        }
    }//GEN-LAST:event_addFileButtonActionPerformed

    private void filesListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_filesListValueChanged
        if (filesList.getSelectedIndex() == -1) {
            removeFileButton.setEnabled(false);
        } else {
            removeFileButton.setEnabled(true);
        }
    }//GEN-LAST:event_filesListValueChanged

    private void removeFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeFileButtonActionPerformed
        filesListModel.remove(filesList.getSelectedIndex());
    }//GEN-LAST:event_removeFileButtonActionPerformed

    private void generateCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_generateCheckBoxStateChanged
        if (generateCheckBox.isSelected()) {
            setBoxPointsPanelEnabled(false);
        } else {
            setBoxPointsPanelEnabled(true);
        }
    }//GEN-LAST:event_generateCheckBoxStateChanged

    private void addBoxingPointButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBoxingPointButtonActionPerformed
        double minValue = Double.parseDouble(minValueSpinner.getValue().toString());
        double maxValue = Double.parseDouble(maxValueSpinner.getValue().toString());
        if (minValue >= maxValue) {
            JOptionPane.showMessageDialog(this, "Max. point must be greater than Min. point");
            return;
        }
        Vector dataVector = boxingPointsTableModel.getDataVector();
        int objIndex = 0;
        if (dataVector.size() == 0) {
            objIndex = -1;
        } else {
            Vector lastRow = (Vector) dataVector.get(dataVector.size() - 1);
            String cellContent = (String) lastRow.get(0);
            String afterOpenParenthesis = cellContent.split("\\(")[1];
            objIndex = Integer.parseInt(afterOpenParenthesis.substring(0, afterOpenParenthesis.length() - 1));
        }
        Vector newRow = new Vector();
        newRow.add(String.format("Obj(%d)", objIndex + 1));
        newRow.add(minValueSpinner.getValue().toString());
        newRow.add(maxValueSpinner.getValue().toString());
        boxingPointsTableModel.addRow(newRow);
    }//GEN-LAST:event_addBoxingPointButtonActionPerformed

    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            outputFilePathTextField.setText(fileChooser.getSelectedFile().getPath() + "/hypervolumes_report.txt");
        }
    }//GEN-LAST:event_browseButtonActionPerformed

    private void calculateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calculateButtonActionPerformed
        try {
            doAllTheWork();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, ex.toString(), "I/O Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception ex) {
            Logger.getLogger(HyperVolumeCalculator.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_calculateButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HyperVolumeCalculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HyperVolumeCalculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HyperVolumeCalculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HyperVolumeCalculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HyperVolumeCalculator().setVisible(true);
            }
        });
    }

    private void setBoxPointsPanelEnabled(boolean state) {
        Component[] components = boxingPointsPanel.getComponents();
        boxingPointsPanel.setEnabled(state);
        for (Component component : components) {
            component.setEnabled(state);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBoxingPointButton;
    private javax.swing.JButton addFileButton;
    private javax.swing.JCheckBox autoAdjustCheckBox;
    private javax.swing.JPanel boxingPointsPanel;
    private javax.swing.JTable boxingPointsTable;
    private javax.swing.JButton browseButton;
    private javax.swing.JButton calculateButton;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JList filesList;
    private javax.swing.JPanel filesPanel;
    private javax.swing.JCheckBox generateCheckBox;
    private javax.swing.JButton jButton2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel maxValueLabel;
    private javax.swing.JSpinner maxValueSpinner;
    private javax.swing.JLabel minValueLabel;
    private javax.swing.JSpinner minValueSpinner;
    private javax.swing.JTextField outputFilePathTextField;
    private javax.swing.JPanel outputPanel;
    private javax.swing.JButton removeFileButton;
    // End of variables declaration//GEN-END:variables

    private void doAllTheWork() throws IOException, Exception {
        try {
            double[] minValues;
            double[] maxValues;
            if (generateCheckBox.isSelected()) {
                minValues = getMinMaxValuesFromFiles(true);
                System.out.println("Ideal Point = " + Arrays.toString(minValues));
                maxValues = getMinMaxValuesFromFiles(false);
                System.out.println("Ref.  Point = " + Arrays.toString(maxValues));
            } else {
                minValues = getMinMaxValuesFromTable(true);
                maxValues = getMinMaxValuesFromTable(false);
            }
            if (autoAdjustCheckBox.isSelected()) {
                for (int i = 0; i < maxValues.length; i++) {
                    maxValues[i] = maxValues[i] * 1.01;
                }
            }
            StringBuilder reportBuilder = new StringBuilder();
            for (int i = 0; i < filesListModel.size(); i++) {
                // Gypervolume calculations
                String filePath = (String) filesListModel.get(i);
                double haithamHypervolume;
                if (maxValues.length <= 5) {
                    // If you have 5 or less objectives calculate the exact
                    // hypervolume using Zitzler's algorithm
                    SolutionSet population = Utilities.haithamReadNonDominatedSolutionSet(filePath);
                    haithamHypervolume = new Hypervolume().haithamHypervolume(
                            population.writeObjectivesToMatrix(),
                            minValues,
                            maxValues,
                            minValues.length);
                } else {
                    // Otherwise, use the WFG hypervolume algorithm
                    haithamHypervolume = WFGHV.haithamHypervolume(filePath, maxValues);
                }
                reportBuilder.append(String.format("%-150s (%12.7f)%n", filePath, haithamHypervolume));
            }
            writeReportToFile(reportBuilder.toString(), outputFilePathTextField.getText());
            JOptionPane.showMessageDialog(this, "Hypervolume Report Generated Successfully", "Finished Successfully", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.toString(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private double[] getMinMaxValuesFromFiles(boolean min) throws IOException {
        double[] values = null;
        for (int i = 0; i < filesListModel.size(); i++) {
            BufferedReader reader = null;
            try {
                reader = new BufferedReader(new FileReader((String) filesListModel.get(i)));
                String line;
                int lineCount = 0;
                while ((line = reader.readLine()) != null) {
                    lineCount++;
                    if (line.startsWith("#")) {
                        continue;
                    }
                    String[] strPartsArr = Utilities.replaceBlanksWithSingleSpace(line).split(" ");
                    Vector<Double> vector = new Vector();
                    for (int j = 0; j < strPartsArr.length; j++) {
                        vector.add(Double.parseDouble(strPartsArr[j]));
                    }
                    if (values == null) {
                        values = new double[vector.size()];
                        for (int j = 0; j < values.length; j++) {
                            values[j] = vector.get(j);
                        }
                    } else {
                        if (vector.size() == values.length) {
                            for (int j = 0; j < values.length; j++) {
                                if (min) {
                                    if (vector.get(j) < values[j]) {
                                        values[j] = vector.get(j);
                                    }
                                } else {
                                    if (vector.get(j) > values[j]) {
                                        values[j] = vector.get(j);
                                    }
                                }
                            }
                        } else {
                            String errorMessage
                                    = String.format(
                                            "Error while parsing file \"%s\"."
                                            + "Line %d has only %d objective values."
                                            + "The number of values in each data line must "
                                            + "be equal to the number of objectives which "
                                            + "is %d (According to the first line).",
                                            filesListModel.get(i),
                                            lineCount,
                                            vector.size(),
                                            values.length);
                            throw new IllegalArgumentException(errorMessage);
                        }
                    }
                }
            } finally {
                if (reader != null) {
                    reader.close();
                }
            }
        }
        return values;
    }

    private double[] getMinMaxValuesFromTable(boolean min) {
        double[] values = new double[boxingPointsTableModel.getRowCount()];
        int columnIndex;
        if (min) {
            columnIndex = 1;
        } else {
            columnIndex = 2;
        }
        for (int i = 0; i < boxingPointsTableModel.getRowCount(); i++) {
            values[i] = Double.parseDouble(
                    boxingPointsTableModel.getValueAt(i, columnIndex).toString());
        }
        return values;
    }

    private void writeReportToFile(String reportText, String filePath) throws IOException {
        PrintWriter printer = null;
        try {
            printer = new PrintWriter(filePath);
            printer.print(reportText);
        } finally {
            if (printer != null) {
                printer.close();
            }
        }
    }

    private void deepFilesExtraction(File file, List<File> filesInDirList) {
        if (file.isDirectory()) {
            File[] innerFiles = file.listFiles();
            for (File innerFile : innerFiles) {
                deepFilesExtraction(innerFile, filesInDirList);
            }
        } else {
            if (file.getName().endsWith(".dat")) {
                filesInDirList.add(file);
            }
        }
    }
}
