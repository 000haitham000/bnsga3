/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */


import Utilities.Mathematics;

/**
 *
 * @author toshiba
 */
public class HimanshuStuff {

    private static final boolean DEBUGGING2 = true;

    static void elitist_sorting(
            Individual[] mixed_pop,
            Individual[] newPop,
            OptimizationProblem problem,
            ReferenceDirection[] directions,
            double[] ideal_point,
            //int remaining,
            int curr_gen) {

        int i, temp_nref, k, ii, jj;
        double param;
        int popsize = newPop.length;

        //int[] rank = new int[2 * newPop.length];
        int[] final_pop_indices = new int[newPop.length];
        int[] selected_pop_indices = new int[2 * newPop.length];
        
        Integer remaining = new Integer(0);
        Integer limiting_front = new Integer(0);
        Integer final_pop_size = new Integer(0);
        Integer selected_pop_size = new Integer(0);

        find_limiting_front(mixed_pop, limiting_front, remaining, popsize, curr_gen);
        if (problem.constraints != null && problem.constraints.length > 0) {
            define_feasible_selected_pop(mixed_pop, final_pop_size, selected_pop_size, remaining, popsize, limiting_front, selected_pop_indices, final_pop_indices, curr_gen);
        } else {
            define_selected_pop(final_pop_size, selected_pop_size, remaining, popsize, limiting_front, selected_pop_indices, final_pop_indices, curr_gen);
        }

        //--------------------MODIFICATION-START-------------
	/*
         printf("\nselected_pop_indices: ");
         for(i = 0; i < selected_pop_size; i++)
         printf("%d ", selected_pop_indices[i]);
         printf("\nfinal_pop_indices: ");
         for(i = 0; i < final_pop_size; i++)
         printf("%d ", final_pop_indices[i]);
         */
        //--------------------MODIFICATION-END---------------

        if (selected_pop_size > problem.objectives.length) {
            //double[] intercept = new double[problem.objectives.length];
            int[] hole = new int[directions.length];
            double[][] D = new double[selected_pop_size][directions.length];
            int[][] clstr_info = new int[selected_pop_size + 1][directions.length];
            int[] within_clstr_rank = new int[selected_pop_size];
            int[][] clstr_info_limiting_front = new int[selected_pop_size + 1][directions.length];
            int[] nclstr = new int[directions.length];
            int[] nclstr_sure = new int[directions.length];
            int[] idx = new int[selected_pop_size];

            /* Normalization */
            translate_pop(mixed_pop, selected_pop_size, selected_pop_indices, ideal_point, problem);

            //--------------------MODIFICATION-START-------------
            if (DEBUGGING2) {
                System.out.print("\n---------------------------------");
                System.out.print("\nTranslated Mixed Pop (objectives)");
                System.out.print("\n---------------------------------\n");
                for (ii = 0; ii < selected_pop_size; ii++) {
                    System.out.print("(");
                    for (jj = 0; jj < problem.objectives.length; jj++) {
                        System.out.format("%6.2f", trans_pop[ii][jj]);
                        if (jj != problem.objectives.length - 1) {
                            System.out.print(",");
                        }
                    }
                    System.out.print(")\n");
                }
            }

            //printf("\nideal_point after translation (should be the same): ");
            //for(i = 0; i < nobj; i++)
            //	printf("%f ", ideal_point[i]);
            //--------------------MODIFICATION-END---------------
            double[] intercept = find_intercepts(selected_pop_size, selected_pop_indices, curr_gen, ideal_point, problem);

            if (DEBUGGING2) {
                System.out.print("\n----------");
                System.out.print("\nIntercepts");
                System.out.print("\n----------\n");
                System.out.print("(");
                for (ii = 0; ii < problem.objectives.length; ii++) {
                    System.out.format("%6.2f", intercept[ii]);
                    if (ii != problem.objectives.length - 1) {
                        System.out.print(",");
                    }
                }
                System.out.print(")\n");

                System.out.print("\n-------------------");
                System.out.print("\nReference Points");
                System.out.print("\n-------------------\n");
                for (i = 0; i < directions.length; i++) {
                    //printf("Ref.Point(%6.2f,%6.2f,%6.2f)\n", ref_pt[i][0], ref_pt[i][1], ref_pt[i][2]);
                    //printf("double[] d%d = {%f, %f, %f};\n", i, ref_pt[i][0], ref_pt[i][1], ref_pt[i][2]);
                    System.out.format("double[] d%d = {", i);
                    for (int j = 0; j < directions[i].direction.length; j++) {
                        System.out.format("%f", directions[i].direction[j]);
                        if (j != directions[i].direction.length - 1) {
                            System.out.print(",");
                        }
                    }
                    System.out.println("};");
                }
                for (i = 0; i < directions.length; i++) {
                    System.out.format("directionsList.add(new ReferenceDirection(d%d));\n", i);
                }
            }
            /* Association */
            associate(directions, selected_pop_size, intercept, D, nclstr, nclstr_sure, clstr_info_limiting_front, idx, clstr_info, selected_pop_indices, limiting_front, problem);
            if (DEBUGGING2) {
                System.out.print("\n----------------");
                System.out.print("\nDistances Table");
                System.out.print("\n----------------\n");
                for (ii = 0; ii < directions.length; ii++) {
                    System.out.format("Ref. Point(%i)%n", ii);
                    for (jj = 0; jj < selected_pop_size; jj++) {
                        System.out.format("\tD(%i,%i) = %6.2f%n", jj, ii, D[jj][ii]);
                    }
                }
                System.out.print("\n-------------------");
                System.out.print("\nAssociation Results");
                System.out.print("\n-------------------\n");
                for (ii = 0; ii < directions.length; ii++) {
                    System.out.format("# of solutions attached to direction(%i) =  %i\n", ii, nclstr[ii]);
                }
                System.out.print("-------------------\n");
                for (ii = 0; ii < selected_pop_size; ii++) {
                    //printf("solution(%i) is attched to direction(%5.2f,%5.2f,%5.2f)\n", ii, ref_pt[idx[ii]][0], ref_pt[idx[ii]][1], ref_pt[idx[ii]][2]/*idx[ii]*/);
                    System.out.format("solution(%i) is attched to direction %s%n", directions[idx[ii]]);
                }
                System.out.print("-------------------\n");
                for (ii = 0; ii < directions.length; ii++) {
                    System.out.format("# of \"final\" solutions attched to direction(%i) =  %i\n", ii, nclstr_sure[ii]);
                }
                System.out.print("-------------------\n");
                for (ii = 0; ii < selected_pop_size + 1; ii++) {
                    for (jj = 0; jj < directions.length; jj++) {
                        if (clstr_info[ii][jj] >= 0 && clstr_info[ii][jj] <= selected_pop_size) {
                            System.out.format("(%2d,%2d) = %2d\n", ii, jj, clstr_info[ii][jj]);
                        }
                    }
                }
            }

            if (remaining > 0) {
                calculate_within_cluster_ranks(mixed_pop, directions, remaining, D, nclstr, nclstr_sure, clstr_info_limiting_front, idx, clstr_info, selected_pop_indices, limiting_front, problem);
            }

            if (curr_gen > 1) {
                if (remaining > 0) {
                    /* Niching */
                    define_final_pop(directions, remaining, popsize, selected_pop_size, final_pop_size, final_pop_indices, nclstr, nclstr_sure, clstr_info_limiting_front, idx, problem);

                    /* Adaptive reference points */
                    System.out.format("No. of active reference points = %d%n", (directions.length - hole.length));

                    /*
                     if(adaptive_increment>=1 && start_incr==1)
                     {
                     temp_nref=nref;
                     param =(double)popsize/(double)(nref-nholes);
                     if (curr_gen <= ngen)
                     printf("\nparam = %f\n",param);
                     if(nref<10*onref)
                     check_for_increment();
                     else
                     remove_points();
                     if(temp_nref<nref)
                     printf("\nRef points increased from %d to %d",temp_nref,nref);
                     if((temp_nref==nref) &&  (param == 1.0) && (nholes>0))
                     remove_points();
                     if((temp_nref==nref) && param>1.0 && incr_exhausted==1)
                     {
                     scaling=2.0*scaling;
                     remove_points();
                     printf("Scaling Doubled >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>");
                     }
                     if(temp_nref>nref)
                     printf("\nRef points reduced from %d to %d",temp_nref,nref);

                     }
                     */



                }

            }

            /*fp=fopen("test.txt","w");
             fp1=fopen("preference.txt","r");
             fp2=fopen("crowding.txt","r");*/
        }
        if (curr_gen > 1) {
            if (remaining > 0) {
                for (i = 0; i < newPop.length; i++) {
                    //copy_ind( & mixed_pop - > ind[selected_pop_indices[final_pop_indices[i]]],  & new_pop - > ind[i]);
                    newPop[i] = mixed_pop[selected_pop_indices[final_pop_indices[i]]];
                }
            } else {
                for (i = 0; i < newPop.length; i++) {
                    /*printf("fp[%i] = %i\n",i,final_pop_indices[i]);*/
                    //copy_ind( & mixed_pop - > ind[final_pop_indices[i]],  & new_pop - > ind[i]);
                    newPop[i] = mixed_pop[final_pop_indices[i]];
                }

            }
        }

    }

    private static void find_limiting_front(
            Individual[] pop,
            Integer limiting_front,
            Integer remaining,
            int popsize,
            int curr_gen) {
        int i, maxfront, total, max_feasible_front;
        int[] front_count;

        if (curr_gen > 1) {
            front_count = new int[2 * popsize];
            maxfront = 0;
            max_feasible_front = 0;

            rank = new int[2 * popsize];

            for (i = 0; i < 2 * popsize; i++) {
                front_count[i] = 0;
                rank[i] = pop[i].getRank();
                if ((rank[i] > max_feasible_front) && (pop[i].getTotalConstraintViolation() >= 0.0)) {
                    max_feasible_front = rank[i];
                }
                if (rank[i] > maxfront) {
                    maxfront = rank[i];
                }
            }
            for (i = 0; i < 2 * popsize; i++) {
                front_count[rank[i] - 1] += 1;
            }
            total = 0;
            for (i = 0; i < maxfront; i++) {
                total += front_count[i];
                if (total > popsize) {
                    limiting_front = i + 1;
                    remaining = popsize - total + front_count[i];
                    break;
                }
            }
            if (remaining > 0 && max_feasible_front < limiting_front) {
                remaining = 0;
                limiting_front += 1;
            }
        } else {
            maxfront = 0;
            for (i = 0; i < popsize; i++) {
                rank[i] = pop[i].getRank();
                if (rank[i] > maxfront) {
                    maxfront = rank[i];
                }
            }
            limiting_front = maxfront + 1;
            remaining = 0;
        }
    }

    private static void define_feasible_selected_pop(
            Individual[] pop,
            Integer final_pop_size,
            Integer selected_pop_size,
            Integer remaining,
            Integer limiting_front,
            int popsize,
            int[] selected_pop_indices,
            int[] final_pop_indices,
            int curr_gen) {
        int i;
        //final_pop_size=0;
        //selected_pop_size=0;
	/* Here remaining > 0 implies that no. of feasible solutions is greater than popsize */
        if (remaining > 0) {
            for (i = 0; i < 2 * popsize; i++) {
                if (rank[i] < limiting_front + 1) {
                    selected_pop_indices[selected_pop_size] = i;
                    selected_pop_size += 1;

                    if (rank[i] < limiting_front && final_pop_size < popsize) {
                        final_pop_indices[final_pop_size] = selected_pop_size - 1;
                        final_pop_size += 1;
                    }
                }
            }
        } else {
            if (curr_gen > 1) {
                selected_pop_size = 0;
                for (i = 0; i < 2 * popsize; i++) {
                    if (rank[i] < limiting_front) {
                        if (pop[i].getTotalConstraintViolation() >= 0.0) {
                            selected_pop_indices[selected_pop_size] = i;
                            selected_pop_size += 1;
                        }
                        if (final_pop_size < popsize) {
                            final_pop_indices[final_pop_size] = i;
                            final_pop_size += 1;
                        }
                    }
                }
            } else {
                for (i = 0; i < popsize; i++) {
                    if (pop[i].getTotalConstraintViolation() >= 0.0) {
                        selected_pop_indices[selected_pop_size] = i;
                        selected_pop_size += 1;
                    }
                    final_pop_indices[final_pop_size] = i;
                    final_pop_size += 1;
                }

            }

        }
    }

    private static void define_selected_pop(
            Integer final_pop_size,
            Integer selected_pop_size,
            Integer remaining,
            Integer limiting_front,
            int popsize,
            int[] selected_pop_indices,
            int[] final_pop_indices,
            int curr_gen) {
        int i;
        final_pop_size = 0;
        selected_pop_size = 0;
        if (remaining > 0) {
            for (i = 0; i < 2 * popsize; i++) {
                if (rank[i] < limiting_front + 1) {
                    selected_pop_indices[selected_pop_size] = i;
                    selected_pop_size += 1;
                    if (rank[i] < limiting_front) {
                        final_pop_indices[final_pop_size] = selected_pop_size - 1;;
                        final_pop_size += 1;
                    }
                }
            }
        } else {
            if (curr_gen > 1) {
                for (i = 0; i < 2 * popsize; i++) {
                    if (rank[i] < limiting_front) {
                        selected_pop_indices[selected_pop_size] = i;
                        selected_pop_size += 1;
                        final_pop_indices[final_pop_size] = i;
                        final_pop_size += 1;
                    }
                }
            } else {
                for (i = 0; i < popsize; i++) {
                    selected_pop_indices[i] = i;
                }
                selected_pop_size = popsize;

            }

        }
    }

    private static double[] find_intercepts(
            int selected_pop_size,
            int[] selected_pop_indices,
            int curr_gen,
            double[] ideal_point,
            OptimizationProblem problem) {
        double[] intercept = new double[problem.objectives.length];
        int i, k, l, minind, flag, flag2;
        double[] A;
        double asf, minasf, temp;
        double[] nadir;
        double[] fmax;
        double INF = Double.MAX_VALUE;

        A = new double[(int) Math.pow(problem.objectives.length, 2)];
        nadir = new double[problem.objectives.length];
        fmax = new double[problem.objectives.length];
        /* Determining Nadir Point */

        for (i = 0; i < problem.objectives.length; i++) {
            nadir[i] = -1 * INF;
            fmax[i] = -1 * INF;
            for (k = 0; k < selected_pop_size; k++) {
                if (rank[selected_pop_indices[k]] == 1) {
                    if (nadir[i] < trans_pop[k][i]) {
                        nadir[i] = trans_pop[k][i];
                    }
                }
                if (fmax[i] < trans_pop[k][i]) {
                    fmax[i] = trans_pop[k][i];
                }
            }
            /*printf("\nnadir  = %f\n",nadir[i]);*/
        }

        /* Finding plane points to form Hyperplane */
        double[][] plane_point = new double[problem.objectives.length][problem.objectives.length];
        for (i = 0; i < problem.objectives.length; i++) {
            intercept[i] = 1.0;
            asf = INF;
            /* Getting asf value of previous generation plane points */
            if (curr_gen > 1) {
                asf = -1.0;
                for (k = 0; k < problem.objectives.length; k++) {
                    plane_point[i][k] = plane_point[i][k] - ideal_point[k];
                    temp = plane_point[i][k];
                    if (temp < 1.0e-3) {
                        temp = 0;
                    }
                    if (k != i) {
                        temp = temp * 1.0e6;
                    }
                    if (temp > asf) {
                        asf = temp;
                    }
                }
                minasf = asf;
                minind = -1;
            } else {
                minind = 0;
                minasf = INF;
            }
            /* Identifying the minimum asf points */
            for (k = 0; k < selected_pop_size; k++) {
                if (rank[selected_pop_indices[k]] == 1) {
                    asf = -1.0;
                    for (l = 0; l < problem.objectives.length; l++) {
                        temp = trans_pop[k][l];
                        if (temp < 1.0e-3) {
                            temp = 0.0;
                        }
                        if (l != i) {
                            temp = temp * 1.0e6;
                        }
                        if (temp > asf) {
                            asf = temp;
                        }
                    }
                }
                /*printf("asf =  %f\t minasf = %f\n",asf,minasf);*/
                if (asf < minasf) {
                    minasf = asf;
                    minind = k;
                }
            }
            if (minind >= 0) {
                /*printf("minasf =  %f\n",minasf);*/
                for (k = 0; k < problem.objectives.length; k++) {
                    plane_point[i][k] = trans_pop[minind][k];
                }
            }
        }
        for (i = 0; i < problem.objectives.length; i++) {
            for (k = 0; k < problem.objectives.length; k++) {
                A[i * problem.objectives.length + k] = plane_point[i][k];
            }
        }

        if (DEBUGGING2) {
            System.out.format("------------------------\n");
            System.out.format("      Nadir Point       \n");
            System.out.format("------------------------\n");
            System.out.format("Nadir = (");
            for (i = 0; i < problem.objectives.length; i++) {
                System.out.format("%5.2f", nadir[i]);
                if (i != problem.objectives.length - 1) {
                    System.out.format(",");
                }
            }
            System.out.format(")\n");

            System.out.format("---------------------------\n");
            System.out.format("       Max. Objecitves     \n");
            System.out.format("---------------------------\n");
            System.out.format("Max vector = (");
            for (i = 0; i < problem.objectives.length; i++) {
                System.out.format("%5.2f", fmax[i]);
                if (i != problem.objectives.length - 1) {
                    System.out.format(",");
                }
            }
            System.out.format(")\n");

            System.out.format("------------------------\n");
            System.out.format("     Plane Points       \n");
            System.out.format("------------------------\n");
            for (i = 0; i < problem.objectives.length; i++) {
                for (k = 0; k < problem.objectives.length; k++) {
                    System.out.format("Plane Point(%d,%d) = %5.2f\n", i, k, plane_point[i][k]);
                }
            }
        }

        /* extending plane to axes and determining intercepts */

        double[][] AA = prepareMatrixForGaussianElimination(A);

        try {
            Mathematics.gaussianElimination(AA, intercept);
            flag = 0;
        } catch (Mathematics.SingularMatrixException ex) {
            flag = -1;
        }

        if (flag == -1) {
            for (i = 0; i < problem.objectives.length; i++) {
                intercept[i] = nadir[i];

            }
        } else {
            flag2 = 0;
            for (i = 0; i < problem.objectives.length; i++) {
                if (intercept[i] <= 1e-6) {
                    flag2 = 1;
                    break;
                }
                intercept[i] = 1.0 / intercept[i];
                if (intercept[i] != intercept[i]) {
                    flag2 = 1;
                    break;
                }

            }
            if (flag2 == 1) {
                for (i = 0; i < problem.objectives.length; i++) {
                    intercept[i] = nadir[i];
                }
            }

        }

        for (i = 0; i < problem.objectives.length; i++) {
            if (intercept[i] <= 1e-6) {
                intercept[i] = fmax[i];
            }

            /*printf("intercept =  %f ideal pt = %f  nadir = %f\n",intercept[i],ideal_point[i],nadir[i]);*/

            for (k = 0; k < problem.objectives.length; k++) {
                plane_point[i][k] = plane_point[i][k] + ideal_point[k];
                /*printf("plane pt[%i][%i] =  %f\n",i,k,plane_point[i][k]);*/
            }
        }

        return intercept;
    }

    private static void define_final_pop(
            ReferenceDirection[] directions,
            int remaining,
            int popsize,
            int selected_pop_size,
            int final_pop_size,
            int[] final_pop_indices,
            int[] nclstr,
            int[] nclstr_sure,
            int[][] clstr_info_limiting_front,
            int[] idx,
            //int[] created_around,
            //int start_incr,
            OptimizationProblem problem) {
        int ii, jj;
        int i, j, nh, idef = 0/*un-initialized in the original code*/, flag, nmax, nmin;
        int temp;
        int[] select_count = new int[directions.length]; /* contains the number of points selected from last front belonging to jth reference point */
        int[] nothole = new int[directions.length]; /* indices of reference points having atleast one pop member */

        nh = 0;
        flag = 0;
        for (i = 0; i < directions.length; i++) {
            select_count[i] = 0;
            if (nclstr[i] > 0) {
                nothole[nh] = i;
                nh += 1;
            }

        }
        if (remaining > 0) {
            i = 0;
            while (i < remaining) {
                temp = 100000;
                /* Identify minimum niche count clstr */
                for (j = 0; j < nh; j++) {
                    if (temp > nclstr_sure[nothole[j]]) {
                        temp = nclstr_sure[nothole[j]];
                        idef = nothole[j];
                        if (temp == 0) {
                            break;
                        }
                    }
                }

                if ((select_count[idef] + 1) > clstr_info_limiting_front[0][idef]) {
                    nclstr_sure[idef] = 1000000;
                } else {
                    final_pop_indices[final_pop_size + i] = clstr_info_limiting_front[select_count[idef] + 1][idef];
                    nclstr_sure[idef] += 1;
                    select_count[idef] += 1;
                    i += 1;
                }

                if (DEBUGGING2) {
                    // Display clstr_info_limiting_front matrix
                    System.out.format("--------------------------\n");
                    System.out.format("clstr_info_limiting_front\n");
                    System.out.format("--------------------------\n");
                    for (ii = 0; ii < selected_pop_size + 1; ii++) {
                        for (jj = 0; jj < directions.length; jj++) {
                            if (clstr_info_limiting_front[ii][jj] < 0 || clstr_info_limiting_front[ii][jj] > selected_pop_size) {
                                System.out.format("%3s", "-");
                            } else {
                                System.out.format("%3d", clstr_info_limiting_front[ii][jj]);
                            }
                        }
                        System.out.format("\n");
                    }
                    // Display final_pop_indices
                    System.out.format("-----------------\n");
                    System.out.format("final_pop_indices\n");
                    System.out.format("-----------------\n");
                    for (ii = 0; ii < popsize; ii++) {
                        if (final_pop_indices[ii] < 0 || final_pop_indices[ii] > selected_pop_size) {
                            System.out.format("%3s", "-");
                        } else {
                            System.out.format("%5d", final_pop_indices[ii]);
                        }
                    }
                    System.out.format("\n");
                    // Display nclstr_sure
                    System.out.format("-----------------\n");
                    System.out.format("nclstr_sure\n");
                    System.out.format("-----------------\n");
                    for (ii = 0; ii < directions.length; ii++) {
                        System.out.format("%5d", nclstr_sure[ii]);
                    }
                    System.out.format("\n");
                    // Display select_count
                    System.out.format("-----------------\n");
                    System.out.format("select_count\n");
                    System.out.format("-----------------\n");
                    for (ii = 0; ii < directions.length; ii++) {
                        System.out.format("%5d", select_count[ii]);
                    }
                    System.out.format("\n");
                }

            }
            for (i = 0; i < directions.length; i++) {
                nclstr[i] = 0;
            }
            for (i = 0; i < popsize; i++) {
                nclstr[idx[final_pop_indices[i]]] += 1;
            }
            /*
            int nholes = 0;
            int incr_exhausted = 1;
            for (i = 0; i < directions.length; i++) {
                if (nclstr[i] == 0) {
                    nholes += 1;
                }
                if (nclstr[i] >= 1) {
                    //printf("\n%d",created_around[i]);
                    if (created_around[i] < problem.objectives.length) {
                        incr_exhausted = 0;
                    }
                }
            }
            */
            /*
             if(start_incr==0)
             {
             nmax=directions.length-nholes;
             nmin=directions.length-nholes;
             for (i=9;i>0;i--)
             {
             if(nmax<active_ref_pts[i-1])
             nmax=active_ref_pts[i-1];
             if(nmin>active_ref_pts[i-1])
             nmin=active_ref_pts[i-1];
             active_ref_pts[i]=active_ref_pts[i-1];
             }

             active_ref_pts[0]=nref-nholes;
             if((nmax-nmin)<((int)(0.01*(double)onref)+1))
             {
             printf("\nnmax = %d nmin = %d",nmax,nmin);
             start_incr=1;
             }
             }
             */
        }
    }

    private static void calculate_within_cluster_ranks(
            Individual[] pop,
            ReferenceDirection[] directions,
            Integer remaining,
            double[][] D,
            int[] nclstr,
            int[] nclstr_sure,
            int[][] clstr_info_limiting_front,
            int[] idx,
            int[][] clstr_info,
            int[] selected_pop_indices,
            Integer limiting_front,
            OptimizationProblem problem) {

        double INF = Double.MAX_VALUE;
        int i, j, best = 0/* un-initialized in the original code */, tempi, flag;
        double temp;

        if (remaining > 0) {
            for (i = 0; i < directions.length; i++) {
                if (nclstr[i] > 0) {
                    if (nclstr[i] > 1) {
                        temp = INF;
                        flag = 0;
                        for (j = 0; j < nclstr[i]; j++) {
                            if (rank[selected_pop_indices[clstr_info[j][i]]] == limiting_front && nclstr_sure[i] == 0) {
                                if (temp > D[clstr_info[j][i]][i]) {
                                    temp = D[clstr_info[j][i]][i];
                                    best = j;
                                }
                                flag = 1;
                            }
                        }
                        if (flag == 1) {
                            tempi = clstr_info[0][i];
                            clstr_info[0][i] = clstr_info[best][i];
                            clstr_info[best][i] = tempi;
                        }
                    }

                    for (j = 0; j < nclstr[i]; j++) {
                        if (rank[selected_pop_indices[clstr_info[j][i]]] == limiting_front) {

                            clstr_info_limiting_front[clstr_info_limiting_front[0][i] + 1][i] = clstr_info[j][i];
                            clstr_info_limiting_front[0][i] += 1;
                        }
                    }
                }
            }
        }
    }

    private static void associate(
            ReferenceDirection[] directions,
            Integer selected_pop_size,
            double[] intercept,
            double[][] D,
            int[] nclstr,
            int[] nclstr_sure,
            int[][] clstr_info_limiting_front,
            int[] idx,
            int[][] clstr_info,
            int[] selected_pop_indices,
            Integer limiting_front,
            OptimizationProblem problem) {
        double INF = Double.MAX_VALUE;
        int i, j, k;
        double temp, d1, d2, lambda;
        /* Perpendicular distance calculation */
        for (i = 0; i < directions.length; i++) {
            for (j = 0; j < selected_pop_size; j++) {
                d1 = 0.0;
                lambda = 0.0;
                for (k = 0; k < problem.objectives.length; k++) {
                    d1 += trans_pop[j][k] * directions[i].direction[k] / intercept[k];
                    lambda += directions[i].direction[k] * directions[i].direction[k];
                }
                lambda = Math.sqrt(lambda);
                d1 = d1 / lambda;
                d2 = 0.0;
                for (k = 0; k < problem.objectives.length; k++) {
                    d2 += Math.pow((trans_pop[j][k] / intercept[k] - d1 * directions[i].direction[k] / lambda), 2.0);
                }
                D[j][i] = Math.sqrt(d2);

            }
            nclstr[i] = 0;
            nclstr_sure[i] = 0;
            clstr_info_limiting_front[0][i] = 0;
        }

        /* Associating each population member with the closest reference point */
        for (i = 0; i < selected_pop_size; i++) {
            temp = INF;
            for (j = 0; j < directions.length; j++) {
                if (temp > D[i][j]) {
                    temp = D[i][j];
                    idx[i] = j;
                }
            }

            clstr_info[nclstr[idx[i]]][idx[i]] = i;
            nclstr[idx[i]] += 1;

            if (rank[selected_pop_indices[i]] < limiting_front) {
                nclstr_sure[idx[i]] += 1;
            }
        }
    }

    private static void translate_pop(
            Individual[] pop,
            int selected_pop_size,
            int[] selected_pop_indices,
            double[] ideal_point,
            OptimizationProblem problem) {
        int i, j;
        trans_pop = new double[selected_pop_size][problem.objectives.length];
        for (i = 0; i < selected_pop_size; i++) {
            for (j = 0; j < problem.objectives.length; j++) {
                trans_pop[i][j] = pop[selected_pop_indices[i]].getObjective(j) - ideal_point[j];
            }
        }
    }
    // FIELDS
    private static double[][] trans_pop;
    private static int[] rank;

    private static double[][] prepareMatrixForGaussianElimination(double[] A) {
        if (Mathematics.compare(Math.sqrt(A.length), (int) Math.sqrt(A.length)) != 0) {
            throw new UnsupportedOperationException("A must be convertable to a square matrix");
        }
        double[][] AA = new double[(int) Math.sqrt(A.length)][(int) Math.sqrt(A.length)];
        int count = 0;
        for (int i = 0; i < AA.length; i++) {
            for (int j = 0; j < AA[i].length; j++) {
                AA[i][j] = A[count];
                count++;
            }
        }
        return AA;
    }
}
